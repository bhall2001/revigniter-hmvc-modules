<?lc
put gBASEPATH into gBASEPATH

if gBASEPATH is "gBASEPATH" then
	put "No direct script access allowed."
	exit to top
end if

##
# revIgniter Modules Library
#
# Functions for addressing HMVC Modules in Revigniter
#
# @package		revIgniter
# @subpackage	Libraries
# @category	  	Libraries
# @author		bhall_2001@yahoo.com
# @license		https://github.com/bhall2001/revigniter-hmvc-modules/blob/master/LICENSE
# @link		   https://github.com/bhall2001/revigniter-hmvc-modules/blob/master/README.md
#
# @created    	2015-Nov-17
# @modified   	2015-Nov-19
#
##

## LOGGING
rigLogMessage "debug", "HMVC Module Library Loaded"

# DECLARE LOCAL VARIABLES
local sModule, sMODPATH

##module.php function run(module)
rigLogMessage "debug", "*HMVC run() routine"
put gAPPPATH & "modules/" into sMODPATH

## returns a Module from a URI if it exsists.
## Also sets the active module in sModule
command hmvcFetchModule pURI
	rigLogMessage "debug", "*HMVC Fetch Module->" & pURI

	if pURI is not empty then
		set itemDelimiter to "/"
		put item 1 of pURI into tModule

		if there is a folder (sMODPATH & tModule) then
			rigLogMessage "debug", "*Module Found!"
			setModule tModule
			setMODPATH tModule
		end if
	end if
end hmvcFetchModule

## LOAD A MODULE CONTROLLER
function hmvcLoadController pModule
	##module.php function load($module)

end hmvcLoadController


/*----------------------------------------------------------------------
--| FUNCTION rigLoadConfigFile
--|
--| Author: rabit
--| Version:  1.3
--| Created: 30-06-09
--| Last Mod: 17-09-15
--| Requires: rigShowError, rigLogMessage, rigIsMainConfigLoaded()
--|
--| Summary: Loads any configuration file.
--|
--| Format:  rigLoadConfigFile(param1, param2, param3, param4)
--|
--| Parameters: string <pConfigFile>, bool <pUseSections>, bool <pFailGracefully>
--|
--| Return: bool
----------------------------------------------------------------------*/

function hmvcLoadConfigFile pConfigFile pUseSections pFailGracefully
	if sConfigIsLoaded is an array then
		put the number of lines in the keys of sConfigIsLoaded into tConfigIsLoadedKeyNum
	else
		put 0 into tConfigIsLoadedKeyNum
	end if

	if pConfigFile is empty then
		put "config" into tConfigFileName

		if rigIsMainConfigLoaded() is TRUE then
			add 1 to tConfigIsLoadedKeyNum
			put "config" into sConfigIsLoaded[tConfigIsLoadedKeyNum]
		end if
	else
		# REMOVE SUFFIX
		put pConfigFile into tConfigFileName
		replace gEXT with "" in tConfigFileName
	end if

	## CHECK IF THE CONFIG FILE IS ALREADY LOADED
	if sMdoule is not empty then
		if _IsInConfigArray(sConfigIsLoaded, tConfigFileName, (sModule & "_") ) then
			return TRUE
		end if
	end if

	if _IsInConfigArray(sConfigIsLoaded, tConfigFileName, "" ) then
		return TRUE
	end if


	put FALSE into tIsInConfigArray
	repeat for each element thisElement in sConfigIsLoaded
		if thisElement is tConfigFileName then
			put TRUE into tIsInConfigArray
			exit repeat
		end if
	end repeat
	 if tIsInConfigArray is TRUE then
		return TRUE
	end if

	# CHECK IF FILE EXISTS
	put gAPPPATH & "config/" & tConfigFileName & gEXT into tFilepath
	if there is a file tFilepath then
	else
		if pFailGracefully is TRUE then
			return FALSE
		else
			rigShowError "The configuration file" && tConfigFileName & gEXT && "does not exist."
		end if
	end if

	if pUseSections is not TRUE then -- gConfig ARRAY IS USED FOR CONFIGURATION DATA
		# CHECK IF NEW CONFIGURATION FILE CONTAINS VALID CONFIGURATION DATA
		put the number of lines in the keys of gConfig into tCurrentConfigItemNum
		require tFilepath
		put the number of lines in the keys of gConfig into tNewConfigItemNum

		if tNewConfigItemNum = tCurrentConfigItemNum then
			if pFailGracefully is TRUE then
				return FALSE
			else
				rigShowError "Your" && tConfigFileName & gEXT && "file does not appear to contain a valid configuration array."
			end if
		end if

	else -- ARRAY IS USED TO AVOID NAME COLLISIONS
		# CHECK IF NEW CONFIGURATION FILE CONTAINS VALID CONFIGURATION DATA
		require tFilepath
		put gConfig[tConfigFileName] into tSectionArray

		if tSectionArray is not an array then
			if pFailGracefully is TRUE then
				return FALSE
			else
				rigShowError "Your" && tConfigFileName & gEXT && "file does not appear to contain a valid configuration array."
			end if
		end if
	end if

	add 1 to tConfigIsLoadedKeyNum
	put pConfigFile into sConfigIsLoaded[tConfigIsLoadedKeyNum]

	rigLogMessage "debug", "Config file loaded: config/" & pConfigFile & gEXT
	return TRUE

end hmvcLoadConfigFile

function _IsInConfigArray pConfigIsLoaded pConfigFileName pPrefix
	repeat for each element thisElement in pConfigIsLoaded
		if thisElement is (pPrefix & pConfigFileName) then
			return true
			exit repeat
		end if
	end repeat
 	return FALSE
end _IsInConfigArray


## ---------------------------------------
# SKIPPING PHP AUTOLOAD FUNCTIONS FOR NOW
#
# skip function autoload
#
## ---------------------------------------


## LOAD A MODULE FILE
function hmvcLoadFile pFilename, pFilepath
	##module.php function load_file()

end hmvcLoadFile

## FIND A FILE
## Scans for files located within modules directories.
## Also scans application directories for models, plugins and views. (FUTURE)
## Generates fatal error if file not found.
function findModule pFile, pModule, pBase
	##module.php function find()

end findModule

## PARSE MODULE ROUTES
function hmvcParseRoutes pModule, pURI
	##module.php parse_routes()

end hmvcParseRoutes

function _hmvcValidateRequest pSegmentsArray
	rigLogMessage "debug", "*_hmvcValidateRequest->" & pSegmentsArray[1] & "|" & pSegmentsArray[2]

	# DOES THE REQUESTED HMVC DEFAULT CONTROLLER EXIST IN THE MODULE FOLDER?
	if there is a file (sMODPATH & "controllers/" & pSegmentsArray[1] & gEXT) then
		rigLogMessage "debug", "*VALID HMVC DEFAULT Controller->" & pSegmentsArray[1]
		rigSetDirectory ("../modules/" & sModule & "/controllers")
		return true
	end if

	# DOES THE REQUESTED HMVC CONTROLLER EXIST IN THE MODULE FOLDER?
	if there is a file (sMODPATH & "controllers/" & pSegmentsArray[2] & gEXT) then
		rigLogMessage "debug", "*VALID HMVC Controller->" & pSegmentsArray[2]
		rigSetDirectory ("../modules/" & sModule & "/controllers")
		return true
	end if

	rigLogMessage "debug", "*NO VALID HMVC Controller FOUND"

	## No Valid HMVC Controller found
	return false
end _hmvcValidateRequest

function _hmvcLocateController pSegmentsArray

	if there is a file (sMODPATH & "controllers/" & pSegmentsArray[2] & gEXT) then
		combine pSegmentsArray using "/"
		set the itemdelimiter to "/"
		put item 2 to -1 of pSegmentsArray into pSegmentsArray
		split pSegmentsArray by "/"
	end if

	return pSegmentsArray
end _hmvcLocateController

## SET THE ACTIVE MODULE
command setModule pModule
	put pModule into sModule

	rigLogMessage "debug", "*HMVC setModule->" & sModule
end setModule

## GET THE ACTIVE MODULE
function getModule
	return sModule
end getModule

## SET THE PATH TO THE ACTIVE MODULE
command setMODPATH pModule
	put gAPPPATH & "modules/" & pModule & "/" into sMODPATH
	rigLogMessage "debug", "*sMODPATH->" & sMODPATH
end setMODPATH

## GET THE ACTIVE MODULE pPath
function getMODPATH
	return sMODPATH
end getMODPATH
